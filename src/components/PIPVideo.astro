---
import QuitPIP from "@/assets/quit-pip-svgrepo-com.svg"
import ToPIP from "@/assets/to-pip-svgrepo-com.svg"
import { getLangFromUrl, useTranslations } from '@/i18n/utils';
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const errorMessages = {
    code_2: t('error.message.2'),
    code_5: t('error.message.5'),
    code_100: t('error.message.100'),
    code_101_150: t('error.message.101_150'),
    unknown: t('error.unknown'),
    autoplay: t('warn.auto-play'),
    popup: t('warn.popup')
};

---

<div id="contents">
    <div id="container">
        <button type="button" id="quit-pip" class="pip-btn" >
            <QuitPIP />
        </button>
        <div id="player" transition:name="video-player" transition:persist>
            <div id="controlbar">
                <p class="no-picture-in-picture">
                    <a href="https://caniuse.com/picture-in-picture">{t('pip.no-avaiable')}</a>
                </p>
                <button type="button" id="to-pip" class="pip-btn">
                    <ToPIP />
                </button>
            </div>
            <div id="custom" ></div>
        </div>
    </div>
</div>

<style>

:root{
    color-scheme: light dark;
}

#contents {
    width: 100%;
    height: 100%;
    
    font:
        14px "Open Sans",
        sans-serif;
}

#container{
    width: 100%;
    height: 100%;

    display: flex;
    flex-direction: column;
    justify-content: start;
    align-items: center;
}

p{
    margin: 0;
    padding: 2px 0;
}

#player{
    background: transparent;
    border-radius: 6px;
    padding-inline: 0px;
    margin: 0;
    width: 100%;
    min-width: 120px;

    height: 56.25vw;
    min-height: 80px;

    & #controlbar{
        max-width: fit-content;
        width: 100%;
        height: min-content;
        border-radius: 4px;
        margin: 1px;
        position: relative;
        z-index: -9999;
        visibility: hidden;
        left: .5rem;
        top: 1.5rem;
    };
    &:hover #controlbar{
        visibility: visible;
        z-index: 9999;
        & .pip-btn svg{
            transform: scale(1.5);
            fill: #464BD8;
        }
    };
}

.pip-btn{
    padding: 1px;
    background: transparent;
    border-radius: 4px;
    border: 0px solid transparent;
    
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;

    & svg{
        width: 24px;
        height: 24px;
        margin: 0;
        padding: 0;
        transition: all 1s ease;
        fill: #464BD8;
    };
    &:hover{
        transform: scale(1.05);
        background-color: #fff2;
        & svg{
            transform: scale(1.5);
        }
    };
    &[id="quit-pip"]{
        display: none;
    }
}

#player[is-popup=true]{
    padding-inline: 0;
    padding-block: 0;

    width: 100%;
    height: 100%;
    min-width: 240px;
    max-width: 100%;
    min-height: 480px;
    max-height: 100%;

    background: transparent;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;

    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    object-fit: cover;
    
    & #controlbar{
        display: none;
    }
    & #custom{
        object-fit: cover;
        min-width: 120px;
        min-height: 80px;
        width: 100%;
        height: 100%;
    }
    & .pip-btn{
        &[id="to-pip"]{
            display: none;
        };
    }
}

@media (hover:none), (hover:on-demand), (pointer: coarse){
    .pip-btn[id="to-pip"]{
        display: flex;
    }

    #player #controlbar{
        visibility: visible;
        z-index: 9999;
        position: relative;
        left: .5rem;
        top: 1.3rem;
        & .pip-btn svg{
            transform: scale(1.5);
            fill: #464BD8;
        }
    }
}

@media (display-mode: picture-in-picture){
    #player{
        padding-inline: 0;
        padding-block: 0;

        width: 100%;
        height: 100%;
        min-width: 120px;
        max-width: 1020px;
        min-height: 80px;
        max-height: 720px;

        background: transparent;
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;

        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        object-fit: cover;
        
        & #controlbar{
            display: none;
        }
        & #custom{
            object-fit: cover;
            min-width: 120px;
            min-height: 80px;
        }
    }

    .pip-btn{
        &[id="to-pip"]{
            display: none;
        };
    }
}

</style>

<script is:inline src="/pip-polyfill.js"></script>
<script is:inline type="module" define:vars={{ errorMessages }}>

const urlSearchParams = new URLSearchParams(window.location.search);
const { videoid = "" } = Object.fromEntries(urlSearchParams.entries());

const tag = document.createElement('script');
tag.src = "/iframe-api.js";
const firstScriptTag = document.getElementsByTagName('script')[0];
firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

const videoPlayer = document.getElementById("player");
const playerContainer = document.getElementById("container");
const bar = document.getElementById("controlbar");
const toPIP = bar.querySelector("button[id='to-pip']")
const quitPIP = document.querySelector("button[id='quit-pip']")
const customElement = document.querySelector("div#custom");

bar.querySelector(".no-picture-in-picture").remove();
toPIP.addEventListener("click", onPictureInPicture);
quitPIP.addEventListener("click", quitPictureInPicture);
const { w = "100%", h = "80%" } = customElement.dataset;

function parseError(data){
    switch(data){
        case 2:
            return errorMessages['code_2'];
        case 5:
            return errorMessages['code_5'];
        case 100:
            return errorMessages['code_100'];
        case 150:
        case 101:
            return errorMessages['code_101_150'];
    }
    return errorMessages['unknown'];
}

let player, duration = undefined;
function onYouTubeIframeAPIReady(){
    player = new YT.Player('custom', {
        width: w,
        height: h,
        videoId: videoid,
        playerVars: {
            'autoplay': 1,
            'enablejsapi': 1,
            'loop': 1,
            'modestbranding': 1
        },
        events: {
            'onReady': event => {
                duration = duration ?? player?.getCurrentTime() ?? 0;
                event.target.playVideo();
                player?.playVideo();
                event.target.seekTo(duration, true);
                setInterval(() => { duration = player?.getCurrentTime() ?? 0; }, 1000)
            },
            'onError': event => {
                const { data } = event;
                let message = "Error: \n";
                message += parseError(data);
                alert(message);
            },
            'onAutoplayBlocked': () => {
                console.warn(errorMessages['autoplay'])
            }
        }
    });
}

// Load on window 
window.onYouTubeIframeAPIReady = onYouTubeIframeAPIReady;

async function createPopupWindow(){

    if (!document.pictureInPictureElement && document.pictureInPictureEnabled){
        // PIP API enabled
        const pipWindow = await window.documentPictureInPicture.requestWindow({
            width: 640,
            height: 480,
        });
        return pipWindow
    }else{
        // Popup Window
        const popup = window.open(
            '',
            'Youtube PIP',
            'width=640,height=480,resizable=yes,scrollbars=no,popup=yes'
        );
        if(!popup){
            alert(errorMessages['popup']);
        }else{
            videoPlayer.setAttribute("is-popup", "true");
        }
        window.popupWindowElement = popup;
        return popup;
    }
}

async function onPictureInPicture(){
    const pipWindow = await createPopupWindow();
    
    pipWindow.addEventListener("pagehide", () => {
        quitPictureInPicture();
    });

    copyStyleSheets(pipWindow);

    // Move the player to the Picture-in-Picture window.
    quitPIP.style.display = "flex";
    if( window.popupWindowElement ){
        toPIP.style.display = "none";
    }
    pipWindow.document.body.append(videoPlayer);
    player?.seekTo(duration, true);
}

async function quitPictureInPicture(){
    if (window.documentPictureInPicture.window) {
        playerContainer.append(videoPlayer);
        window.documentPictureInPicture.window.close();
        quitPIP.style.display = "none";
    }else if(window.popupWindowElement){
        playerContainer.append(videoPlayer);
        window.popupWindowElement?.close();
        videoPlayer.setAttribute("is-popup", "false");
        quitPIP.style.display = "none";
        toPIP.style.display = "flex";
    }
    player?.seekTo(duration, true);
}

async function copyStyleSheets(pipWindow){
    [...document.styleSheets].forEach((styleSheet) => {
        try {
            const cssRules = [...styleSheet.cssRules]
                .map((rule) => rule.cssText)
                .join("");
            const style = document.createElement("style");

            style.textContent = cssRules;
            pipWindow.document.head.appendChild(style);
        } catch (e) {
            const link = document.createElement("link");

            link.rel = "stylesheet";
            link.type = styleSheet.type;
            link.media = styleSheet.media;
            link.href = styleSheet.href;
            pipWindow.document.head.appendChild(link);
        }
    });
}


</script>